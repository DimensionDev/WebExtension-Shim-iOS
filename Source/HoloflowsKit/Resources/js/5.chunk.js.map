{"version":3,"sources":["extension/background-script/WelcomeService.ts"],"names":["__webpack_require__","r","__webpack_exports__","d","backupMyKeyPair","openWelcomePage","_holoflows_kit__WEBPACK_IMPORTED_MODULE_0__","_utils_type_transform_String_ArrayBuffer__WEBPACK_IMPORTED_MODULE_1__","_utils_utils__WEBPACK_IMPORTED_MODULE_2__","_social_network_facebook_com_parse_username__WEBPACK_IMPORTED_MODULE_3__","_utils_i18n__WEBPACK_IMPORTED_MODULE_4__","_database_people__WEBPACK_IMPORTED_MODULE_5__","async","identifier","Object","obj","generateBackupJSON","full","whoami","people","promises","localKeys","size","console","log","addWhoAmI","data","push","network","userId","nickname","previousIdentifiers","localKey","exportKey","get","publicKey","privateKey","id","addPeople","groups","map","g","groupId","type","p","Promise","all","version","k","crypto","subtle","string","JSON","stringify","buffer","blob","Blob","url","URL","createObjectURL","date","Date","today","getFullYear","getMonth","toString","padStart","getDate","browser","downloads","download","filename","conflictAction","saveAs","isMobile","TypeError","runtime","getURL","toText","tabs","create","current","query","active","update"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,oCAAAE,IAAAJ,EAAAG,EAAAD,EAAA,oCAAAG,IAAA,IAAAC,EAAAN,EAAA,IAAAO,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,GAAAW,EAAAX,EAAA,IAqEOY,eAAAR,EAAAS,SAEGC,OAAAN,EAAA,EAAAM,CAAK,KACf,MAAAC,QAjEAH,eAAAI,EAAAH,EAAAI,GAAA,GACA,MAAAC,EAAA,GACAC,EAAA,GACAC,EAAA,GAEAC,QAA4BP,OAAAH,EAAA,eAAAG,GAC5B,OAAAO,EAAAC,KAKA,OAHAC,QAAAC,IAAA,wCACcV,OAAAH,EAAA,mBAAAG,CAAkBD,SAClBC,OAAAH,EAAA,qBAAAG,CAAoBD,GAClCG,EAAAH,EAAAI,GAEAL,eAAAa,EAAAC,GACAR,EAAAS,KAAA,CACAC,QAAAF,EAAAb,WAAAe,QACAC,OAAAH,EAAAb,WAAAgB,OACAC,SAAAJ,EAAAI,SACAC,oBAAAL,EAAAK,oBACAC,eAAAC,EAAAZ,EAAAa,IAAAR,EAAAb,WAAAe,SAAAF,EAAAb,WAAAgB,SACAM,gBAAAF,EAAAP,EAAAS,WACAC,iBAAAH,EAAAP,EAAAU,cAGA,UAAAC,WAA2BvB,OAAAH,EAAA,kBAAAG,GAC3BM,EAAAO,KAAAF,EAAAY,IAIAzB,eAAA0B,EAAAZ,GACAP,EAAAQ,KAAA,CACAC,QAAAF,EAAAb,WAAAe,QACAC,OAAAH,EAAAb,WAAAgB,OACAU,OAAAb,EAAAa,OAAAC,IAAAC,IAAA,CAA2Cb,QAAAa,EAAAb,QAAAc,QAAAD,EAAAC,QAAAC,KAAAF,EAAAE,QAC3Cb,SAAAJ,EAAAI,SACAC,qBAAAL,EAAAK,qBAAA,IAAAS,IAAAI,IAAA,CAA6EhB,QAAAgB,EAAAhB,QAAAC,OAAAe,EAAAf,UAC7EM,gBAAAF,EAAAP,EAAAS,aAGA,GAAAlB,EACA,UAAA2B,WAA8B9B,OAAAH,EAAA,cAAAG,CAAa,QAC3C8B,EAAAT,WACAf,EAAAO,KAAAW,EAAAM,IAKA,aADAC,QAAAC,IAAA1B,GACAH,EACA,CACA8B,QAAA,EACA7B,SACAC,UAGA,CACA4B,QAAA,EACA7B,UAEA,SAAAe,EAAAe,GACA,OAAAC,OAAAC,OAAAjB,UAAA,MAAAe,IAMAhC,CAAAH,GACAsC,EAAAC,KAAAC,UAAAtC,GACAuC,EAAmBxC,OAAAP,EAAA,EAAAO,CAAUqC,GAC7BI,EAAA,IAAAC,KAAA,CAAAF,GAAA,CAAqCX,KAAA,qBACrCc,EAAAC,IAAAC,gBAAAJ,GACAK,EAAA,IAAAC,KACAC,KAAqBF,EAAAG,kBAAsBH,EAAAI,WAAA,GAAAC,WAAAC,SAAA,UAAqDN,EAChGO,UACAF,WACAC,SAAA,SACAE,QAAAC,UAAAC,SAAA,CACAb,MACAc,qCAA8CT,SAC9CU,eAAA,SACAC,QAAA,IAGO7D,eAAAP,EAAAgC,EAAAqC,GACP,IAAS5D,OAAAL,EAAA,EAAAK,CAAeuB,EAAAR,QACxB,UAAA8C,UAA4B7D,OAAAJ,EAAA,EAAAI,CAAa,6BACzC,MAAA2C,EAAAW,QAAAQ,QAAAC,OAAA,kCAAAxC,EAAAyC,UACA,IAAAJ,EAQA,OAAAN,QAAAW,KAAAC,OAAA,CAAoCvB,QARpC,CACA,MAAAwB,SAAAb,QAAAW,KAAAG,MAAA,CAAoDC,QAAA,IACpD,GAAAF,EACA,OAAAb,QAAAW,KAAAK,OAAAH,EAAA5C,GAAA,CACAoB,SA3FA3C,OAAAR,EAAA,EAAAQ,CAAgB","file":"js/5.chunk.js","sourcesContent":["import { OnlyRunInContext } from '@holoflows/kit';\nimport { encodeText } from '../../utils/type-transform/String-ArrayBuffer';\nimport { sleep } from '../../utils/utils';\nimport { regularUsername } from '../../social-network/facebook.com/parse-username';\nimport { geti18nString } from '../../utils/i18n';\nimport { getMyIdentitiesDB, getLocalKeysDB, queryPeopleDB, generateLocalKeyDB, generateMyIdentityDB, } from '../../database/people';\nOnlyRunInContext('background', 'WelcomeService');\nasync function generateBackupJSON(identifier, full = false) {\n    const whoami = [];\n    const people = [];\n    const promises = [];\n    //#region data.whoami\n    const localKeys = await getLocalKeysDB();\n    if (localKeys.size === 0) {\n        // ? New user !\n        console.log('New user! Generating key pairs');\n        await generateLocalKeyDB(identifier);\n        await generateMyIdentityDB(identifier);\n        return generateBackupJSON(identifier, full);\n    }\n    async function addWhoAmI(data) {\n        whoami.push({\n            network: data.identifier.network,\n            userId: data.identifier.userId,\n            nickname: data.nickname,\n            previousIdentifiers: data.previousIdentifiers,\n            localKey: await exportKey(localKeys.get(data.identifier.network)[data.identifier.userId]),\n            publicKey: await exportKey(data.publicKey),\n            privateKey: await exportKey(data.privateKey),\n        });\n    }\n    for (const id of await getMyIdentitiesDB()) {\n        promises.push(addWhoAmI(id));\n    }\n    //#endregion\n    //#region data.people\n    async function addPeople(data) {\n        people.push({\n            network: data.identifier.network,\n            userId: data.identifier.userId,\n            groups: data.groups.map(g => ({ network: g.network, groupId: g.groupId, type: g.type })),\n            nickname: data.nickname,\n            previousIdentifiers: (data.previousIdentifiers || []).map(p => ({ network: p.network, userId: p.userId })),\n            publicKey: await exportKey(data.publicKey),\n        });\n    }\n    if (full) {\n        for (const p of await queryPeopleDB(() => true)) {\n            if (p.publicKey)\n                promises.push(addPeople(p));\n        }\n    }\n    //#endregion\n    await Promise.all(promises);\n    if (full)\n        return {\n            version: 1,\n            whoami,\n            people,\n        };\n    else\n        return {\n            version: 1,\n            whoami,\n        };\n    function exportKey(k) {\n        return crypto.subtle.exportKey('jwk', k);\n    }\n}\nexport async function backupMyKeyPair(identifier) {\n    // Don't make the download pop so fast\n    await sleep(1000);\n    const obj = await generateBackupJSON(identifier);\n    const string = JSON.stringify(obj);\n    const buffer = encodeText(string);\n    const blob = new Blob([buffer], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const date = new Date();\n    const today = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date\n        .getDate()\n        .toString()\n        .padStart(2, '0')}`;\n    browser.downloads.download({\n        url,\n        filename: `maskbook-keystore-backup-${today}.json`,\n        conflictAction: 'prompt',\n        saveAs: true,\n    });\n}\nexport async function openWelcomePage(id, isMobile) {\n    if (!regularUsername(id.userId))\n        throw new TypeError(geti18nString('service_username_invalid'));\n    const url = browser.runtime.getURL('index.html#/welcome?identifier=' + id.toText());\n    if (isMobile) {\n        const [current] = await browser.tabs.query({ active: true });\n        if (current)\n            return browser.tabs.update(current.id, {\n                url,\n            });\n    }\n    else {\n        return browser.tabs.create({ url });\n    }\n}\n"],"sourceRoot":""}