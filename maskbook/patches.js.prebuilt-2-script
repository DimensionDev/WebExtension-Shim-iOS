//s
globalThis.regeneratorRuntime = undefined;
{
    const fix = () => {
        if (typeof webkit === 'object' && webkit.messageHandlers)
            return;
        if (globalThis === window || typeof browser !== 'object')
            return;
        const brokenAPI = [
            'requestAnimationFrame',
            'setTimeout',
            'clearTimeout',
            'matchMedia',
            'getComputedStyle',
            'getSelection',
            'requestIdleCallback',
        ];
        const webAPIs = Object.getOwnPropertyDescriptors(window);
        Reflect.deleteProperty(webAPIs, 'window');
        Reflect.deleteProperty(webAPIs, 'globalThis');
        Reflect.deleteProperty(webAPIs, 'eval');
        function FixThisBindings() {
            const patch = { ...webAPIs };
            for (const key in webAPIs) {
                if (brokenAPI.includes(key))
                    PatchThisOfDescriptorToGlobal(webAPIs[key], window);
                else
                    delete webAPIs[key];
            }
            console.log('Applying patch', patch);
            Object.defineProperties(window, patch);
        }
        function PatchThisOfDescriptorToGlobal(desc, global) {
            const { get, set, value } = desc;
            if (get)
                desc.get = function () {
                    if ((x => typeof x === "undefined" ? globalThis : x && Object.getPrototypeOf(x) === null && Object.isFrozen(x) ? globalThis : x)(this) === globalThis)
                        return get.apply(window);
                    return get.apply((x => typeof x === "undefined" ? globalThis : x && Object.getPrototypeOf(x) === null && Object.isFrozen(x) ? globalThis : x)(this));
                };
            if (set)
                desc.set = function (val) {
                    if ((x => typeof x === "undefined" ? globalThis : x && Object.getPrototypeOf(x) === null && Object.isFrozen(x) ? globalThis : x)(this) === globalThis)
                        return set.apply(global, val);
                    return set.apply((x => typeof x === "undefined" ? globalThis : x && Object.getPrototypeOf(x) === null && Object.isFrozen(x) ? globalThis : x)(this), val);
                };
            if (value && typeof value === 'function') {
                const desc2 = Object.getOwnPropertyDescriptors(value);
                desc.value = function (...args) {
                    if (new.target)
                        return Reflect.construct(value, args, new.target);
                    return Reflect.apply(value, (x => typeof x === "undefined" ? globalThis : x && Object.getPrototypeOf(x) === null && Object.isFrozen(x) ? globalThis : x)(this) === globalThis ? global : (x => typeof x === "undefined" ? globalThis : x && Object.getPrototypeOf(x) === null && Object.isFrozen(x) ? globalThis : x)(this), args);
                };
                Object.defineProperties(desc.value, desc2);
                try {
                    desc.value.prototype = value.prototype;
                }
                catch { }
            }
        }
        FixThisBindings();
    };
    try {
        fix();
    }
    catch (e) { }
}
undefined;
